#!/usr/bin/env node

/**
 * Module dependencies.
 */

// =============================================
// ENVIRONMENT and CONFIGURATION SETTINGS
// =============================================
// Add environment variables from the .env files to the app environment
require('dotenv').config();
const config = require('config');

const debug = require('debug')('TourismManagementSystem-node:server');
const http = require('http');
const app = require('../app');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
<<<<<<< HEAD
  var port = parseInt(val, 10);
=======
  const port = parseInt(val, 10);
>>>>>>> dev

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
<<<<<<< HEAD
=======
 * Get port from environment and store in Express.
 */
const port = normalizePort(config.get('serverConfig.port') || '50001');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
>>>>>>> dev
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

<<<<<<< HEAD
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
=======
  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;
>>>>>>> dev

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
<<<<<<< HEAD
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
=======
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
>>>>>>> dev
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
<<<<<<< HEAD
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
=======
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
>>>>>>> dev
